         ixml: SP, rule+SP, SP.

          -SP: (s; pragma)*.
	  
           -s: (whitespace; comment)*.
  -whitespace: -[Zs]; tab; lf; cr.
         -tab: -#9.
          -lf: -#a.
          -cr: -#d.
      comment: -"{", (cchar; comment)*, -"}".
       -cchar: ~["{}"].

       pragma: "[", @pmark?, @pname, (s, pragma-data)?, "]".
       @pname: -QName; -EQName.
       -QName: -name, ':', -name.
      -EQName: 'Q{', -ns-name, '}', -name.
     -ns-name: ~["{}"; '"'; "'"]* { oversimplification }.
       @pmark: ["@^?"].
  pragma-data: (pragma-chars; pragma)*.
-pragma-chars: ~["[]"]*.

         rule: (mark, SP)?, name, s, ["=:"], s, -alts, (pragma, SP)?, ".".
        @mark: ["@^-"].
         alts: alt+([";|"], s).
          alt: term*(",", s).
        -term: factor;
               option;
               repeat0;
               repeat1.
      -factor: terminal;
               nonterminal;
               -"(", s, alts, -")", s.
      repeat0: factor, -"*", s, sep?.
      repeat1: factor, -"+", s, sep?.
       option: factor, -"?", s.
          sep: factor.
  nonterminal: (mark, SP)?, name, s.

    -terminal: literal; 
               charset.
      literal: quoted;
               encoded.
      -quoted: (tmark, SP)?, -string.

        @name: namestart, namefollower*.
   -namestart: ["_"; L].
-namefollower: namestart; ["-.·‿⁀"; Nd; Mn].

       @tmark: ["^-"].
      @string: -'"', dchar+, -'"', s;
                     -"'", schar+, -"'", s.
        dchar: ~['"'; #a; #d];
               '"', -'"'. {all characters except line breaks; quotes must be doubled}
        schar: ~["'"; #a; #d];
               "'", -"'". {all characters except line breaks; quotes must be doubled}
     -encoded: (tmark, SP)?, -"#", @hex, s.
          hex: ["0"-"9"; "a"-"f"; "A"-"F"]+.

     -charset: inclusion; 
               exclusion.
    inclusion: (tmark, SP)?,         set.
    exclusion: (tmark, SP)?, "~", s, set.
         -set: "[", s,  member*([";|"], s), "]", s.
      -member: literal;
               range;
               class.
        range: from, s, -"-", s, to, s.
        @from: character.
          @to: character.
   -character: -'"', dchar, -'"';
               -"'", schar, -"'";
               "#", hex.
        class: code, s.
        @code: capital, letter?.
     -capital: ["A"-"Z"].
      -letter: ["a"-"z"].
